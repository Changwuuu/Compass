remotes::install_github("satijalab/seurat", ref = "release/4.0.0")
install.packages('Seurat')
library(Seurat)
library(SeuratData)
install.packages('SeuratData')
devtools::install_github('satijalab/seurat-data')
devtools::install_github('satijalab/seurat-data')
install.package(devtools)
install.packages(devtools)
install.packages('devtools')
library(Seurat)
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
library(Seurat)
library(SeuratData)
data("pbmc3k")
library(dplyr)
library(Seurat)
library(patchwork)
pbmc.data <- Read10X(data.dir = "../data/pbmc3k/filtered_gene_bc_matrices/hg19/")
AvailableData()
pbmc3k.SeuratData
data(pbmc3k.SeuratData)
data(pbmc3k)
data('pbmc3k)
data('pbmc3k')
InstallData("pbmc3k")
data("pbmc3k")
pbmc <- pbmc3k
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top2000 <- head(VariableFeatures(pbmc), 2000)
pbmc <- pbmc[top2000]
print(pbmc) # Seurat object
library(reticulate)
sc <- import('scanpy', convert = FALSE)
scvi <- import('scvi', convert = FALSE)
scvi$settings$progress_bar_style = 'tqdm'
Y
sc <- import('scanpy', convert = FALSE)
scvi <- import('scvi', convert = FALSE)
scvi$settings$progress_bar_style = 'tqdm'
sc <- import('scanpy', convert = FALSE)
scvi <- import('scvi', convert = FALSE)
scvi$settings$progress_bar_style = 'tqdm'
library(Seurat)
library(SeuratData)
data("pbmc3k")
pbmc <- pbmc3k
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top2000 <- head(VariableFeatures(pbmc), 2000)
pbmc <- pbmc[top2000]
print(pbmc) # Seurat object
library(reticulate)
sc <- import('scanpy', convert = FALSE)
pbmc <- FindNeighbors(pbmc, dims = 1:10, reduction = 'scvi')
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindNeighbors(pbmc)
pbmc <- pca(pbmc)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
pbmc <- FindNeighbors(pbmc, dims = 1:10, reduction = 'scvi')
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc.SNN
pbmc
pbmc <- FindNeighbors(pbmc, dims = 1:10)
attributes(pbmc)
pbmc.RNA_nn
pbmc.graph
pbmc@SNN
pbmc@SNN
pbmc.SNN
pbmc@graphs
pbmc@graphs@RNA_SNN
pbmc@graphs[0]
pbmc@graphs[1]
pbmc@graphs[2]
library(Seurat)
library(SeuratData)
data("pbmc3k")
pbmc <- pbmc3k
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
top2000 <- head(VariableFeatures(pbmc), 2000)
pbmc <- pbmc[top2000]
print(pbmc) # Seurat object
pbmc <- ScaleData(pbmc, features = all.genes)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
DimPlot(pbmc, reduction = "pca")
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc@graphs
pbmc@graphs@SNN
pbmc@graphs@RNA_SNN
pbmc@graphs
pbmc@graphs[2]
devtools::install_github("YosefLab/compassR")
compass_settings <- CompassSettings$new(
user_data_directory = system.file("extdata", "Th17", package = "compassR"),
cell_id_col_name = "cell_id",
gene_id_col_name = "HGNC.symbol"
)
library("YosefLab/compassR")
library("compassR")
compass_settings <- CompassSettings$new(
user_data_directory = system.file("extdata", "Th17", package = "compassR"),
cell_id_col_name = "cell_id",
gene_id_col_name = "HGNC.symbol"
)
compass_data <- CompassData$new(compass_settings)
rlang::last_error()
library(compassR)
library(tidyverse)
compass_settings <- CompassSettings$new(
user_data_directory = system.file("extdata", "Th17", package = "compassR"),
cell_id_col_name = "cell_id",
gene_id_col_name = "HGNC.symbol"
)
compass_data <- CompassData$new(compass_settings)
group_A_cell_ids <-
compass_data$cell_metadata %>%
filter(cell_type == "Th17p") %>%
pull(cell_id)
group_B_cell_ids <-
compass_data$cell_metadata %>%
filter(cell_type == "Th17n") %>%
pull(cell_id)
wilcoxon_results <- compass_analyzer$conduct_wilcoxon_test(
compass_data$reaction_consistencies,
group_A_cell_ids,
group_B_cell_ids,
for_metareactions = FALSE
)
compass_analyzer <- CompassAnalyzer$new(compass_settings)
group_A_cell_ids <-
compass_data$cell_metadata %>%
filter(cell_type == "Th17p") %>%
pull(cell_id)
group_B_cell_ids <-
compass_data$cell_metadata %>%
filter(cell_type == "Th17n") %>%
pull(cell_id)
wilcoxon_results <- compass_analyzer$conduct_wilcoxon_test(
compass_data$reaction_consistencies,
group_A_cell_ids,
group_B_cell_ids,
for_metareactions = FALSE
)
setwd("~/School/Fall2020/Compass/compass/Resources/Test-Data")
library(Matrix)
count <- read.csv("expression.tsv", sep='\t', header=T,row.names = 1)
gbm <- t(count)
# save sparse matrix
sparse.gbm <- Matrix(gbm , sparse = T )
head(sparse.gbm)
## Market Exchange Format (MEX) format
writeMM(obj = sparse.gbm, file="matrix.mtx")
# save genes and cells names
write(x = rownames(gbm), file = "genes.tsv")
write(x = colnames(gbm), file = "barcodes.tsv")
count <- read.csv("test.csv", header=T,row.names = 1)
gbm <- count
# save sparse matrix
sparse.gbm <- Matrix(gbm , sparse = T )
head(sparse.gbm)
## Market Exchange Format (MEX) format
writeMM(obj = sparse.gbm, file="matrix.mtx")
# save genes and cells names
write(x = rownames(gbm), file = "genes.tsv")
write(x = colnames(gbm), file = "barcodes.tsv")
